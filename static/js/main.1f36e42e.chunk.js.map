{"version":3,"sources":["logo.svg","components/Clock.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","now","Date","time","toUTCString","getTimezoneOffset","Math","floor","console","log","Clock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","tomorrow","getFullYear","getMonth","getDate","state","localTime","toLocaleString","offset","seconds","timeTomorrow","localTimeTomorrow","offsetTomorrow","secondsTomorrow","secondsUntilTomorrow","_this2","intervalID","setInterval","tick","clearInterval","setState","react_default","a","createElement","style","width","classNames","borderBottom","position","top","background","React","Component","App","className","components_Clock","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f36e42e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\n\r\n//var locales = 'ja-JP'\r\nlet now = new Date()\r\nlet time = now.toUTCString()\r\nlet offset = now.getTimezoneOffset()\r\nvar seconds = Math.floor(Date.now() / 1000);\r\nconsole.log(time);\r\n\r\nclass Clock extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    const now = new Date()\r\n    const tomorrow = new Date(\r\n      now.getFullYear(),\r\n      now.getMonth(),\r\n      now.getDate()\r\n    )\r\n    this.state = {\r\n      time: now.toUTCString(),\r\n      localTime: now.toLocaleString(),\r\n      offset: now.getTimezoneOffset(),\r\n      seconds: Math.floor(now/1000),\r\n      timeTomorrow: tomorrow.toUTCString(),\r\n      localTimeTomorrow: tomorrow.toLocaleString(),\r\n      offsetTomorrow: tomorrow.getTimezoneOffset(),\r\n      secondsTomorrow: Math.floor(tomorrow/1000),\r\n      secondsUntilTomorrow: Math.floor(tomorrow/1000) - Math.floor(now/1000),       }\r\n  }\r\n  componentDidMount() {\r\n    this.intervalID = setInterval(\r\n      () => this.tick(),\r\n      1000\r\n    );\r\n  }\r\n  componentWillUnmount() {\r\n    clearInterval(this.intervalID);\r\n  }\r\n  tick() {\r\n    const now = new Date()\r\n    const tomorrow = new Date(\r\n      now.getFullYear(),\r\n      now.getMonth(),\r\n      now.getDate()+1\r\n    )\r\n    this.setState({\r\n      time: now.toUTCString(),\r\n      localTime: now.toLocaleString(),\r\n      offset: now.getTimezoneOffset(),\r\n      seconds: Math.floor(now/1000),\r\n      timeTomorrow: tomorrow.toUTCString(),\r\n      localTimeTomorrow: tomorrow.toLocaleString(),\r\n      offsetTomorrow: tomorrow.getTimezoneOffset(),\r\n      secondsTomorrow: Math.floor(tomorrow/1000),\r\n      secondsUntilTomorrow: Math.floor(tomorrow/1000) - Math.floor(now/1000),       \r\n    })\r\n  }\r\n  render() { \r\n    return <div style={{width:\"100%\"}}>\r\n      <div classNames=\"seconds\" style={{\r\n        borderBottom:\"1px solid red\",\r\n\tposition:\"relative\",\r\n\ttop:100*(this.state.seconds%60)/60+\"%\",\r\n\twidth: \"100%\",\r\n\tbackground: \"url(\\\"//temptemp3.github.io/images/core-hours-4x-8.png\\\")\"\r\n      }}></div>\r\n      <hr/>\r\n      <h2>Now</h2>\r\n      <h3>\r\n        The time is {this.state.time}.\r\n      </h3>\r\n      <h3>\r\n        The local time is {this.state.localTime}.\r\n      </h3>\r\n      <h3>\r\n        The seconds is {this.state.seconds}.\r\n      </h3>\r\n      <h3>\r\n        The offset is {this.state.offset}.\r\n      </h3>\r\n      <hr/>\r\n      <h2>Tomorrow</h2>\r\n      <h3>\r\n        The time is {this.state.timeTomorrow}.\r\n      </h3>\r\n      <h3>\r\n        The local time is {this.state.localTimeTomorrow}.\r\n      </h3>\r\n      <h3>\r\n        The seconds is {this.state.secondsTomorrow}.\r\n      </h3>\r\n      <h3>\r\n        The seconds until Tomorrow is {this.state.secondsUntilTomorrow}.\r\n      </h3>\r\n      <hr/>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default Clock;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Clock from './components/Clock';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Clock />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}